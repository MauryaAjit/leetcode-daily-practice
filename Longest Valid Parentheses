import java.util.Stack;

class Solution {
    public int longestValidParentheses(String s) {
        Stack<Integer> stack = new Stack<>();
        stack.push(-1); // base for valid substring calculation
        int maxLen = 0;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            if (c == '(') {
                // push index of '('
                stack.push(i);
            } else {
                // pop the matching '('
                stack.pop();

                if (stack.isEmpty()) {
                    // reset base index if no matching '('
                    stack.push(i);
                } else {
                    // calculate valid substring length
                    maxLen = Math.max(maxLen, i - stack.peek());
                }
            }
        }

        return maxLen;
    }

    // Optional: for testing
    public static void main(String[] args) {
        Solution sol = new Solution();
        System.out.println(sol.longestValidParentheses("(()"));     // Output: 2
        System.out.println(sol.longestValidParentheses(")()())"));  // Output: 4
        System.out.println(sol.longestValidParentheses(""));        // Output: 0
    }
}
