class Solution {
    public int[] movesToStamp(String stamp, String target) {
        char[] S = stamp.toCharArray();
        char[] T = target.toCharArray();
        boolean[] visited = new boolean[T.length];
        List<Integer> result = new ArrayList<>();
        int totalStamped = 0;

        while (totalStamped < T.length) {
            boolean stampedThisRound = false;

            for (int i = 0; i <= T.length - S.length; i++) {
                if (!visited[i] && canStamp(T, i, S)) {
                    int stamped = doStamp(T, i, S.length);
                    if (stamped > 0) {
                        visited[i] = true;
                        stampedThisRound = true;
                        totalStamped += stamped;
                        result.add(i);
                        if (totalStamped == T.length) break;
                    }
                }
            }

            if (!stampedThisRound) {
                return new int[0];
            }
        }

        Collections.reverse(result);
        return result.stream().mapToInt(i -> i).toArray();
    }
    private boolean canStamp(char[] T, int pos, char[] S) {
        for (int i = 0; i < S.length; i++) {
            if (T[i + pos] != '?' && T[i + pos] != S[i]) {
                return false;
            }
        }
        return true;
    }

    private int doStamp(char[] T, int pos, int len) {
        int stamped = 0;
        for (int i = 0; i < len; i++) {
            if (T[i + pos] != '?') {
                T[i + pos] = '?';
                stamped++;
            }
        }
        return stamped;
    }
}
