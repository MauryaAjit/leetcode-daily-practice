class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        # Ensure nums1 is the shorter array
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        m, n = len(nums1), len(nums2)
        low, high = 0, m

        while low <= high:
            partition1 = (low + high) // 2
            partition2 = (m + n + 1)//2 - partition1

            # values just left/right of partition in both arrays
            maxLeft1 = nums1[partition1-1] if partition1 > 0 else float('-inf')
            minRight1 = nums1[partition1] if partition1 < m else float('inf')

            maxLeft2 = nums2[partition2-1] if partition2 > 0 else float('-inf')
            minRight2 = nums2[partition2] if partition2 < n else float('inf')

            if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:
                # found the correct partition
                if (m + n) % 2 == 0:
                    return (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) / 2.0
                else:
                    return float(max(maxLeft1, maxLeft2))
            elif maxLeft1 > minRight2:
                high = partition1 - 1
            else:
                low = partition1 + 1

        # Should not reach here
        raise ValueError("Input arrays not sorted or have invalid input")
